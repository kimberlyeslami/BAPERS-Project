/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI_Package;

import Account_Package.Alert;
import Account_Package.Customer;
import Account_Package.ReminderLetter;
import Database_Package.DBConnectivity;
import Process_Package.Invoice;
import Reports_Package.IndividualPerformanceReport;
import Reports_Package.IndividualReport;
import Reports_Package.SummaryPerformanceReport;
import System_Package.Reader;
import java.io.File;
import java.io.FilenameFilter;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author umahm, Felice Gregorio
 */

public class HomePage extends javax.swing.JFrame {
     /** The Employee job role. */
    private final String jobRole;
       /** Creates new alert. */
    private final Alert alert = new Alert();
    /** The Employees ID. */
    private final String empID;
    private boolean hasAlerts;
   
    /**
     * Creates new form HomePage
     * @param jobRole The Employee's job role.
     */
    public HomePage(String jobRole, String empID) {
        this.empID = empID;
        this.jobRole = jobRole;
        initComponents();
        Role_Label.setText("Job Role: " + jobRole);
        autoGenReports();
        markLatePayments();
        genLetters();
       // autoBackup();
        try {
            hasAlerts = alert.checkAlerts();
            if(jobRole.equals("Office Manager") && hasAlerts){
                JOptionPane.showMessageDialog(null, "You have pending Alerts!", "Attention!", JOptionPane.INFORMATION_MESSAGE); 
            } else {
                alert.getMyDB().closeConnection();
            }
        } catch (SQLException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        HomePage_Field = new javax.swing.JTextField();
        Logout_Button = new javax.swing.JButton();
        Logo = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        Alerts_Button = new javax.swing.JButton();
        BckupRestore_Button = new javax.swing.JButton();
        ViewEnquiries_Button = new javax.swing.JButton();
        ScheduleReports_Button = new javax.swing.JButton();
        ViewReports_Button = new javax.swing.JButton();
        ViewTasks_Button = new javax.swing.JButton();
        InspectJobs_Button = new javax.swing.JButton();
        SearchForCustomer_Button = new javax.swing.JButton();
        CreateCustomerAccount_Button = new javax.swing.JButton();
        CreateJob_Button = new javax.swing.JButton();
        Role_Label = new javax.swing.JLabel();
        ReminderLetters_Button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(0, 153, 255));

        HomePage_Field.setBackground(new java.awt.Color(0, 153, 255));
        HomePage_Field.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        HomePage_Field.setForeground(new java.awt.Color(255, 255, 255));
        HomePage_Field.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        HomePage_Field.setText("Home Page");
        HomePage_Field.setBorder(null);
        HomePage_Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomePage_FieldActionPerformed(evt);
            }
        });

        Logout_Button.setBackground(new java.awt.Color(255, 255, 255));
        Logout_Button.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        Logout_Button.setForeground(new java.awt.Color(0, 153, 255));
        Logout_Button.setText("Logout");
        Logout_Button.setBorder(null);
        Logout_Button.setBorderPainted(false);
        Logout_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Logout_ButtonActionPerformed(evt);
            }
        });

        Logo.setIcon(new javax.swing.ImageIcon("C:\\Users\\kimbe\\Documents\\Uni Work\\Second Year Uni\\Team project\\WhatsApp Image 2018-04-18 at 2.43.23 PM.jpeg")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Logo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(HomePage_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(170, 170, 170)
                .addComponent(Logout_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Logout_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(168, 168, 168))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(HomePage_Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(Logo)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        Alerts_Button.setBackground(new java.awt.Color(255, 255, 255));
        Alerts_Button.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        Alerts_Button.setForeground(new java.awt.Color(0, 153, 255));
        Alerts_Button.setText("Alerts");
        Alerts_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Alerts_ButtonActionPerformed(evt);
            }
        });

        BckupRestore_Button.setBackground(new java.awt.Color(0, 153, 255));
        BckupRestore_Button.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        BckupRestore_Button.setForeground(new java.awt.Color(255, 255, 255));
        BckupRestore_Button.setText("Backup & Restore");
        BckupRestore_Button.setContentAreaFilled(false);
        BckupRestore_Button.setOpaque(true);
        BckupRestore_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BckupRestore_ButtonActionPerformed(evt);
            }
        });

        ViewEnquiries_Button.setBackground(new java.awt.Color(0, 153, 255));
        ViewEnquiries_Button.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        ViewEnquiries_Button.setForeground(new java.awt.Color(255, 255, 255));
        ViewEnquiries_Button.setText("View Enquiries");
        ViewEnquiries_Button.setContentAreaFilled(false);
        ViewEnquiries_Button.setOpaque(true);
        ViewEnquiries_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewEnquiries_ButtonActionPerformed(evt);
            }
        });

        ScheduleReports_Button.setBackground(new java.awt.Color(255, 255, 255));
        ScheduleReports_Button.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        ScheduleReports_Button.setForeground(new java.awt.Color(0, 153, 255));
        ScheduleReports_Button.setText("Schedule Reports");
        ScheduleReports_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ScheduleReports_ButtonActionPerformed(evt);
            }
        });

        ViewReports_Button.setBackground(new java.awt.Color(0, 153, 255));
        ViewReports_Button.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        ViewReports_Button.setForeground(new java.awt.Color(255, 255, 255));
        ViewReports_Button.setText("View Reports");
        ViewReports_Button.setContentAreaFilled(false);
        ViewReports_Button.setOpaque(true);
        ViewReports_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewReports_ButtonActionPerformed(evt);
            }
        });

        ViewTasks_Button.setBackground(new java.awt.Color(0, 153, 255));
        ViewTasks_Button.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        ViewTasks_Button.setForeground(new java.awt.Color(255, 255, 255));
        ViewTasks_Button.setText("View Tasks");
        ViewTasks_Button.setContentAreaFilled(false);
        ViewTasks_Button.setOpaque(true);
        ViewTasks_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewTasks_ButtonActionPerformed(evt);
            }
        });

        InspectJobs_Button.setBackground(new java.awt.Color(255, 255, 255));
        InspectJobs_Button.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        InspectJobs_Button.setForeground(new java.awt.Color(0, 153, 255));
        InspectJobs_Button.setText("Inspect Jobs");
        InspectJobs_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InspectJobs_ButtonActionPerformed(evt);
            }
        });

        SearchForCustomer_Button.setBackground(new java.awt.Color(255, 255, 255));
        SearchForCustomer_Button.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        SearchForCustomer_Button.setForeground(new java.awt.Color(0, 153, 255));
        SearchForCustomer_Button.setText("Search for Customer");
        SearchForCustomer_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchForCustomer_ButtonActionPerformed(evt);
            }
        });

        CreateCustomerAccount_Button.setBackground(new java.awt.Color(0, 153, 255));
        CreateCustomerAccount_Button.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        CreateCustomerAccount_Button.setForeground(new java.awt.Color(255, 255, 255));
        CreateCustomerAccount_Button.setText("Create Customer Account");
        CreateCustomerAccount_Button.setContentAreaFilled(false);
        CreateCustomerAccount_Button.setOpaque(true);
        CreateCustomerAccount_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateCustomerAccount_ButtonActionPerformed(evt);
            }
        });

        CreateJob_Button.setBackground(new java.awt.Color(0, 153, 255));
        CreateJob_Button.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        CreateJob_Button.setForeground(new java.awt.Color(255, 255, 255));
        CreateJob_Button.setText("Create Job");
        CreateJob_Button.setContentAreaFilled(false);
        CreateJob_Button.setOpaque(true);
        CreateJob_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateJob_ButtonActionPerformed(evt);
            }
        });

        Role_Label.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        Role_Label.setText("Role:");

        ReminderLetters_Button.setBackground(new java.awt.Color(255, 255, 255));
        ReminderLetters_Button.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        ReminderLetters_Button.setForeground(new java.awt.Color(0, 153, 255));
        ReminderLetters_Button.setText("Reminder Letters");
        ReminderLetters_Button.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        ReminderLetters_Button.setBorderPainted(false);
        ReminderLetters_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReminderLetters_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ReminderLetters_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(InspectJobs_Button, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Alerts_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ViewTasks_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CreateJob_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ViewEnquiries_Button, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ScheduleReports_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ViewReports_Button, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SearchForCustomer_Button, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CreateCustomerAccount_Button, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
                            .addComponent(BckupRestore_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addComponent(Role_Label)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(Role_Label)
                .addGap(33, 33, 33)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CreateJob_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CreateCustomerAccount_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(InspectJobs_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchForCustomer_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ViewReports_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ViewTasks_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ScheduleReports_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Alerts_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BckupRestore_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ViewEnquiries_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ReminderLetters_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
      /**
     * Alerts Button
     * <p>
     * Checks whether there are any alerts available.
     */
    private void Alerts_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Alerts_ButtonActionPerformed
        if ("Office Manager".equals(jobRole)){
            if (!hasAlerts) {
                JOptionPane.showMessageDialog(null, "No Alerts available!", "Attention!", JOptionPane.INFORMATION_MESSAGE); 
            } else {
                try {
                    alert.genNewJobAlert();
                    alert.genLateTaskAlert();
                    alert.genLatePayAlert();
                    alert.genLetterAlert();
                    alert.genDeadlineApproachingAlert();
                    alert.genPriorityChangedAlert();
                    alert.getMyDB().closeConnection();
                } catch (SQLException ex) {
                    Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "You do not have access to this feature!", "Access Denied", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_Alerts_ButtonActionPerformed
     /**
     * Create Job Button
     * <p>
     * Opens the Create jobs form.
     */
    private void CreateJob_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateJob_ButtonActionPerformed
        if (!("Technician".equals(jobRole))){
            this.dispose();
            CreateJobs cj = new CreateJobs(jobRole, empID);
            cj.setVisible(true); 
        } else {
            JOptionPane.showMessageDialog(null, "You do not have access to this feature!", "Access Denied", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_CreateJob_ButtonActionPerformed
    /**
     * Create Customer Button
     * <p>
     * Opens the Create Customer form.
     */
    private void CreateCustomerAccount_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateCustomerAccount_ButtonActionPerformed
        if (!("Technician".equals(jobRole))){
            this.dispose();
            CustomerAccount ca = new CustomerAccount(jobRole, empID);
            ca.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "You do not have access to this feature!", "Access Denied", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_CreateCustomerAccount_ButtonActionPerformed
     /**
     * Search Customer Button
     * <p>
     * Opens the Search Customer form.
     */
    private void SearchForCustomer_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchForCustomer_ButtonActionPerformed
        if (!("Technician".equals(jobRole))){
            this.dispose();
            SearchCustomer sc = new SearchCustomer(jobRole, empID);
            sc.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "You do not have access to this feature!", "Access Denied", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_SearchForCustomer_ButtonActionPerformed
     /**
     * Inspect Jobs Button
     * <p>
     * Opens the Inspect Jobs form.
     */
    private void InspectJobs_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InspectJobs_ButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
        Inspect_Jobs inspectjobs = new Inspect_Jobs(jobRole, empID);
        inspectjobs.setVisible(true);
    }//GEN-LAST:event_InspectJobs_ButtonActionPerformed
     /**
     * View Tasks Button
     * <p>
     * Opens the Tasks form.
     */
    private void ViewTasks_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewTasks_ButtonActionPerformed
        if (!("Receptionist".equals(jobRole))){
            this.dispose();
            Tasks tasks = new Tasks(jobRole, empID);
            tasks.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "You do not have access to this feature!", "Access Denied", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ViewTasks_ButtonActionPerformed
     /**
     * Logout Button
     * <p>
     * Closes the form and takes you back to the login form.
     */
    private void Logout_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Logout_ButtonActionPerformed
        this.dispose();
        Login_Form l = new Login_Form();
        l.setVisible(true);
    }//GEN-LAST:event_Logout_ButtonActionPerformed
     /**
     * View Reports Button
     * <p>
     * Opens the View Reports form.
     */
    private void ViewReports_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewReports_ButtonActionPerformed
        if ("Office Manager".equals(jobRole) || "Shift Manager".equals(jobRole)){
            this.dispose();
            View_Reports vr = new View_Reports(jobRole, empID);
            vr.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "You do not have access to this feature!", "Access Denied", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ViewReports_ButtonActionPerformed
     /**
     * Schedule Reports Button
     * <p>
     * Opens the Schedule Reports form.
     */
    private void ScheduleReports_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ScheduleReports_ButtonActionPerformed
        if ("Office Manager".equals(jobRole) || "Shift Manager".equals(jobRole)){
            this.dispose();
            ScheduleReport sr = new ScheduleReport(jobRole, empID);
            sr.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "You do not have access to this feature!", "Access Denied", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ScheduleReports_ButtonActionPerformed
     /**
     * View Enquiries Button
     * <p>
     * Opens the View Enquiries form.
     */
    private void ViewEnquiries_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewEnquiries_ButtonActionPerformed
        if (!("Receptionist".equals(jobRole))){
            this.dispose();
            ViewEnquiries ve = new ViewEnquiries(jobRole, empID);
            ve.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "You do not have access to this feature!", "Access Denied", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ViewEnquiries_ButtonActionPerformed
     /**
     * Backup and Restore Button
     * <p>
     * Opens the Backup and Restore form.
     */
    private void BckupRestore_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BckupRestore_ButtonActionPerformed
        if("Office Manager".equals(jobRole)){
            this.dispose();
            BackupAndRestore br = new BackupAndRestore(jobRole, empID);
            br.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "You do not have access to this feature!", "Access Denied", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_BckupRestore_ButtonActionPerformed

    private void HomePage_FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomePage_FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HomePage_FieldActionPerformed

    private void ReminderLetters_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReminderLetters_ButtonActionPerformed
        if("Office Manager".equals(jobRole)){
            this.dispose();
            ReminderLetters rl = new ReminderLetters(jobRole, empID);
            rl.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "You do not have access to this feature!", "Access Denied", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ReminderLetters_ButtonActionPerformed

    /**
    * Auto Generates reports, according to their set schedule.
    * <p>
    * This method is used to automatically generate the system reports according to the schedules set.
    * 
    */
    public void autoGenReports(){
        ArrayList<String> schedules;
        ArrayList<String> reports;
        
        Reader scheduleReader = new Reader("reportsSchedules.txt");
        schedules = scheduleReader.readReportSchedules();
        
        Date now = new Date(Date.valueOf(LocalDate.now()).getTime());
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        
        Reader reportsReader = new Reader("generatedReports.txt");
        reports = reportsReader.readGeneratedReports();
        
        for (String s : schedules){
            String[] line = s.split(",");
            String reptName = line[0];
            String schedule = line[1];
            for (String report : reports){
                try {
                    String[] reptLine = report.split(",");
                    Date date = Date.valueOf(sdf.format(new SimpleDateFormat("dd/MM/yy HH:mm:ss").parse(reptLine[0])));
                    String name = reptLine[1];
                    if (name.equals(reptName)){
                        //Generate Daily Report (According to set schedule)
                        if (schedule.equals("Daily")){
                            if(date.before(now)){
                                gen(reptName, now, now);
                            }
                            //Generate Weekly Report (According to set schedule)
                        } else if (schedule.equals("Weekly")){
                            if (date.toLocalDate().isBefore(now.toLocalDate().minusWeeks(1))){
                                Date start = Date.valueOf(now.toLocalDate().minusWeeks(1));
                                gen(reptName, start, now);
                            }
                            //Generate Monthly Report (According to set schedule)
                        } else {
                            if (date.toLocalDate().isBefore(now.toLocalDate().minusMonths(1))){
                                Date start = Date.valueOf(now.toLocalDate().minusMonths(1));
                                gen(reptName, start, now);
                            }
                        }
                        break;
                    }
                } catch (ParseException ex) {
                    Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
    
    /**
     * Generate report.
     * <p>
     * This method generates the appropriate reports.
     * 
     * @param reptName
     * @param start
     * @param end 
     */
    public void gen(String reptName, Date start, Date end){
        switch (reptName){
            //generate Individual Report
            case "Individual Report":
                DBConnectivity myDB = new DBConnectivity();
                myDB.connect();
                Connection con = myDB.getConn();
                try{
                    con.setAutoCommit(false);
                    ResultSet rs = myDB.read("SELECT customer_ID FROM Customers");
                    while (rs.next()){
                        IndividualReport ir = new IndividualReport(rs.getString("customer_ID"), start, end);
                        ir.generate(true);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                    if (con != null) {
                        try {
                            System.err.print("Transaction rolling back!");
                            con.rollback();
                        } catch (SQLException ex1) {
                            Logger.getLogger(DBConnectivity.class.getName()).log(Level.SEVERE, null, ex1);
                        }
                    }
                } finally {
                    try {
                        con.setAutoCommit(true);
                        myDB.closeConnection();
                    } catch (SQLException ex) {
                        Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                break;
            //generate Individual Performance Report
            case "Individual Performance Report":
                IndividualPerformanceReport ipr = new IndividualPerformanceReport(start, end);
                ipr.generate(true);
                break;
            //generate Summary Performance Report
            case "Summary Performance Report":
                SummaryPerformanceReport spr = new SummaryPerformanceReport(start, end);
                spr.generate(true);
                break;        
        }
    }
    
    /** Mark late payment
     * <p>
     *  This method marks the payment as late.
     */
    
    public void markLatePayments(){
        try {
            DBConnectivity myDB = new DBConnectivity();
            myDB.connect();
            ResultSet rs = myDB.read("SELECT customer_ID, payment_due FROM ValuedCustomer");
            while (rs.next()){
                Customer cust = new Customer(rs.getString("customer_ID"));
                LocalDate now = LocalDate.now();
                LocalDate duePayment = rs.getDate("payment_due").toLocalDate();
                if (duePayment.isBefore(now.minusMonths(1))){
                    ResultSet rs2 = myDB.read("SELECT DISTINCT invoice_ID FROM Invoice INNER JOIN Job USING(invoice_ID) "
                            + "WHERE customer_ID = '" + rs.getString("customer_ID") + "' AND payment_status = 'Pending' "
                                    + "AND DATE(Invoice.date) BETWEEN '" + Date.valueOf(duePayment.minusMonths(1)) + "' AND '" + Date.valueOf(duePayment) + "'");
                    while(rs2.next()){
                        Invoice invoice = new Invoice(rs2.getInt("invoice_ID"));
                        invoice.markLate();
                        cust.setOutstandingBalance(cust.getOutstandingBalance() + invoice.getTotal());
                    }
                    cust.setNextPayment();
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
     /**
     * Generate Letters.
     * <p>
     * This method generates the appropriate letters.
     */
    public void genLetters(){
        LocalDate now = LocalDate.now();
        if (now.getDayOfMonth() == 20){
            try {
                DBConnectivity myDB = new DBConnectivity();
                myDB.connect();
                ResultSet rs = myDB.read("SELECT customer_ID FROM ValuedCustomer");
                while (rs.next()){
                    Customer cust = new Customer(rs.getString("customer_ID"));
                    Date prevMonth = new Date(new GregorianCalendar(now.getYear(), now.getMonthValue()-2, 10).getTimeInMillis());
                    ResultSet rs2 = myDB.read("SELECT DISTINCT invoice_ID FROM Invoice INNER JOIN Job USING(invoice_ID) INNER JOIN ValuedCustomer USING(customer_ID)"
                            + "WHERE customer_ID = '" + cust.getCustID() + "' AND payment_status = 'Late' AND DATE(Invoice.date) < '" + prevMonth + "' AND firstletter_date IS NULL");
                    while (rs2.next()){
                        cust.changeStatus("Suspended");
                        ReminderLetter rl = new ReminderLetter(cust.getCustID(), rs2.getInt("invoice_ID"));
                        rl.generateFirstLetter();
                    }
                    ResultSet rs3 = myDB.read("SELECT DISTINCT invoice_ID FROM Invoice INNER JOIN Job USING(invoice_ID) INNER JOIN ValuedCustomer USING(customer_ID)"
                            + "WHERE customer_ID = '" + cust.getCustID() + "' AND payment_status = 'Late' AND DATE(firstletter_date) < '" + Date.valueOf(now.minusMonths(1)) + "' AND secondletter_date IS NULL");
                    while (rs3.next()){
                        cust.changeStatus("In Default");
                        ReminderLetter rl = new ReminderLetter(cust.getCustID(), rs3.getInt("invoice_ID"));
                        rl.generateSecondLetter();
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    /**
     * Auto backup
     * <p>
     * This method automatically generates a backup of the system.
     */
    
    public void autoBackup(){
        Reader reader = new Reader("backupSchedule.txt");
        String schedule = reader.readBackupSchedule();
        Date fileDate = getLatestBackup();
        switch (schedule){
            case "Daily":
                if (fileDate.before(Date.valueOf(LocalDate.now()))){
                    DBConnectivity myDB = new DBConnectivity();
                    myDB.backup(true);
                }           
                break;
            case "Weekly":
                if (fileDate.before(Date.valueOf(LocalDate.now().minusWeeks(1)))){
                    DBConnectivity myDB = new DBConnectivity();
                    myDB.backup(true);
                }          
                break;
            case "Monthly":
                if (fileDate.before(Date.valueOf(LocalDate.now().minusMonths(1)))){
                    DBConnectivity myDB = new DBConnectivity();
                    myDB.backup(true);
                } 
                break;
        }
    }
    
     /**
     * latest backup
     * <p>
     * This method gets the latest backup of the system.
     * @return returns the latest backup file.
     */
    public Date getLatestBackup(){
        File file = new File("/Users/FMG97/BAPERS_Backup/");
        Date latestFile = null;
        FilenameFilter ff = (File dir, String name1) -> name1.startsWith("BAPERS_bkup");

        File[] fileList = file.listFiles(ff);
        for(File f : fileList) {
            Date fileDate = new Date(f.lastModified());
            if (latestFile == null || fileDate.after(latestFile)){
                latestFile = fileDate;
            } 
        }
        
        return latestFile;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomePage("Office Manager", "FG12").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Alerts_Button;
    private javax.swing.JButton BckupRestore_Button;
    private javax.swing.JButton CreateCustomerAccount_Button;
    private javax.swing.JButton CreateJob_Button;
    private javax.swing.JTextField HomePage_Field;
    private javax.swing.JButton InspectJobs_Button;
    private javax.swing.JLabel Logo;
    private javax.swing.JButton Logout_Button;
    private javax.swing.JButton ReminderLetters_Button;
    private javax.swing.JLabel Role_Label;
    private javax.swing.JButton ScheduleReports_Button;
    private javax.swing.JButton SearchForCustomer_Button;
    private javax.swing.JButton ViewEnquiries_Button;
    private javax.swing.JButton ViewReports_Button;
    private javax.swing.JButton ViewTasks_Button;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
}
